---
import FormLayout, { type Props as FormLayoutProps } from "@/layouts/FormLayout.astro";
import { MAIN_URL } from "@/wrangler";
import fs from "node:fs";
import path from "node:path";

interface ModuleExport {
  default: any;
  NAME: string;
}

interface Props {
  Component: any;
  driver_id: string;
  props: FormLayoutProps;
  all_drivers: Record<string, string>;
}

export async function getStaticPaths() {
  const forms: Record<string, ModuleExport> = import.meta.glob("@/forms/*.tsx", { eager: true });

  const all_drivers: Record<string, string> = {};
  const namemap = new Map<string, string>();
  Object.entries(forms)
    .filter(([_path]) => !_path.includes("/_"))
    .forEach(([_path, module]) => {
      const { NAME } = module as ModuleExport;
      const driver_id = /\/([^\/\\]+?)\.tsx$/.exec(_path)?.[1]!;
      namemap.set(driver_id, NAME);
      all_drivers[driver_id] = NAME;
    });

  const astroForms: Record<string, ModuleExport> = import.meta.glob("@/../.astro/cache/forms/*.astro", { eager: true });
  return Object.entries(astroForms)
    .map(([_path, module]) => {
      const driver_id = _path.match(/\/([^\/\\]+?)\.astro$/)?.[1]!;
      const subtitle = namemap.get(driver_id);
      if (!subtitle) return null;
      const { default: Component } = module as ModuleExport;
      return {
        params: { driver_id },
        props: { Component, driver_id, props: { subtitle, driver_id, all_drivers } }
      };
    })
    .filter(Boolean);
}

const { Component, driver_id, props } = Astro.props as Props;
---

<FormLayout {...props}>
  <Component driver_id={driver_id} endpoint={MAIN_URL} />
</FormLayout>
